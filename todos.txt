1. Document [AND LOG PROPERLY...]: 
	1. [module] 'functions': 
		1.1. id = (x) => x
		1.2. nil = () => {}	
	2. [module] 'object': 
		2.1. 'keys' function; 
		structCheck:
			2.2. Allow the user to RESTRICT certain properties on object from occurring; 
			2.3. Allow the user to have a STRICT type (one that is described completely by the given properties); 		
		2.4. 'values' function; 
		2.5. 'recursiveStringValues' function; 
		2.6. 'recursiveStringKeys' function; 
		2.7. 'recursiveSymbolKeys' function
		2.8. 'recursiveSymbolValues' function; 
	3. [module] 'boolean'
		3.1. equals := (x, y) => x === y
	4. [module] 'typeof': 
		4.1. isNull 	 := (x) => x === null
		4.2. isUndefined := (x) => x === undefined
		4.3. typeOf(x)	 := (x) => typeof x
	5. [module] 'arrays':
		5.1. filter  - a rewrite of the 'Array.prototype.filter' (more efficient in V8, post 38700 elements); 
		5.2. map - a rewrite of the 'Array.prototype.map' (more efficient in V8; post 3046 elements); 
		5.3. copy - a rewrite of the '.map((x) => x)': '(x) => [].concat(x)'; 
		5.4. reduce - a rewrite of the '.reduce(...)' via a for-loop (in v8, becomes superior after ~32000 elements)
		5.5. reduceRight - a rewrite of the '.reduceRight(...)' via a for-loop (in v8, becomes superior after ~32000 elements)
			NOTE: both this AND 'reduce' HAVE A SLIGHTLY ALTERED BEHAVIOUR [they do NOT default to the first and last elements of the array respectively...]; 

		5.6. DELETED 'iterator'; 
		5.7. DELETED 'swapped'; 

	6. Generics to anonymous functions [more thorough typing]; 
		modules: 
			6.1. arrays [check]
			6.2. boolean [check]
			6.3. functions [check]
			6.4. inplace [check]
			6.5. maps [skipped]
			6.6. numbers [check]
			6.7. objects [skipped]
			6.8. sets [check]
			6.9. strings [check]
			6.10. trees [check]
			6.11. typeof [check]